
        self.option_executed.append(1)

    def cli_mode(self):
        print('\n*** Exposing the CLI')
        maxinet.Experiment.CLI(self.exp, None, None)

    def stop_topology(self):
        print('\n*** Closing all')
        self.exp.stop()
        print('*** Killing all router process')
        os.system('sudo -u minisecbgpuser -s ssh %s sudo pkill -9 zebra' % self.server)
        os.system('sudo -u minisecbgpuser -s ssh %s sudo pkill -9 bgpd' % self.server)
        self.option_executed.remove(1)

    def restart_MaxiNet(self):
        print('\n*** Restarting MiniSecBGP cluster nodes (MaxiNet)')
        print('\n  * Stopping  MaxiNetWorkers')
        for worker in self.workers:
            print('    * on node "%s"' % worker)
            os.system('sudo -u minisecbgpuser bash -c \'ssh %s sudo systemctl stop MaxiNetWorker\'' % worker)
        time.sleep(5)
        print('\n  * Restarting MaxiNetFrontendServer on node "%s"' % self.server)
        os.system('sudo -u minisecbgpuser bash -c \'ssh %s sudo systemctl restart MaxiNetFrontendServer\'' % self.server)
        time.sleep(3)
        print('\n  * Starting MaxiNetWorkers')
        for worker in self.workers:
            print('    * on node "%s"' % worker)
            os.system('sudo -u minisecbgpuser bash -c \'ssh %s sudo systemctl start MaxiNetWorker\'' % worker)
        time.sleep(5)
        print('\n*** MaxiNetStatus')
        os.system('sudo -u minisecbgpuser bash -c \'MaxiNetStatus\'')

    def start_hijack_scenario(self):
        subprocess.Popen(['./event_commands.MiniSecBGP'])
        subprocess.Popen(['./event_monitoring.MiniSecBGP'])

    @staticmethod
    def input_to_continue(phrase, color):
        try:
            print(colored('\nAttention: %s. Press any key to continue...' % phrase, color))
            input()
        except SyntaxError:
            pass

    def menu(self):

        clear = lambda: os.system('clear')
        self.restart_MaxiNet()
        clear = lambda: os.system('clear')

        while self.option != 0:

            while True:
                try:
                    clear()

                    print('\n\n'
                          '    [ 1 ] start topology emulation\n'
                          '    [ 2 ] enter CLI mode\n'
                          '    [ 3 ] stop topology emulation\n'
                          '    [ 4 ] start hijack scenario\n'
                          '    [ 9 ] restart MaxiNetFrontendServer and MaxiNetWorkers\n'
                          '    [ 0 ] exit\n')

                    self.option = int(input('\n>>> Choose an option: '))
                    break
                except Exception:
                    self.input_to_continue('Choose a valid option', 'red')

            if self.option == 0:
                if 1 in self.option_executed:
                    self.stop_topology()
                print('\nexiting...\n')
                exit()

            elif self.option == 1:
                if self.option not in self.option_executed:
                    self.start_topology()
                    self.input_to_continue('Topology emulation started successfully', 'green')
                else:
                    self.input_to_continue('Topology already started', 'red')

            elif self.option == 2:
                if 1 in self.option_executed:
                    self.cli_mode()
                else:
                    self.input_to_continue('You need start topology first (menu option [1])', 'red')

            elif self.option == 3:
                if 1 in self.option_executed:
                    self.stop_topology()
                    self.input_to_continue('Topology emulation stopped successfully', 'green')
                else:
                    self.input_to_continue('You need start topology first (menu option [1])', 'red')

            elif self.option == 4:
                event_commands_file = pathlib.Path('event_commands.MiniSecBGP')
                event_monitoring_file = pathlib.Path('event_monitoring.MiniSecBGP')
                if event_commands_file.exists() and event_monitoring_file.exists():
                    if 1 in self.option_executed:
                        self.start_hijack_scenario()
                        self.input_to_continue('Hijacking attack scenario started successfully.\n\n'
                        'You can interact with this scenario through the Mininet terminal (menu option [2])', 'green')
                    else:
                        self.input_to_continue('You need start topology first (menu option [1])', 'red')
                else:
                    self.input_to_continue('There is no event created', 'yellow')

            elif self.option == 9:
                self.restart_MaxiNet()
                self.input_to_continue('MaxiNet Services restarted successfully', 'green')

            else:
                self.input_to_continue('Choose a valid option', 'red')


if __name__ == '__main__':
