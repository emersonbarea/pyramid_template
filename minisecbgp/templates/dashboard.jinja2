{% extends "layout/dashboard.layout.jinja2" %}

{% block contentDashboard %}

  <div class="hero-unit">
    <h1>MiniSecBGP</h1>
    <p>A Lightweight and Distributed Testbed for Security Analysis in BGP.</p>
    <p><a class="btn btn-primary btn-large" href="https://github.com/MiniSecBGP/MiniSecBGP" target="_blank">Learn more &raquo;</a></p>
  </div>
  <div class="row-fluid">
    <div class="span4">
      <h2>Cluster</h2>
      <p>Cluster is composed by the set of servers used for processing the topology in MiniSecBGP. Servers are automatically configured when <a href="{{ request.route_url('cluster') }}">registered</a> in the system. The processing are distributed according to the distribution algorithm chosen by the user, which can be automated or manual.</p>
      <p><a class="btn" href="{{ request.route_url('cluster') }}">View details &raquo;</a></p>
    </div><!--/span-->
    <div class="span4">
      <h2>Topology</h2>
      <p>Topologies are represented by the internet graph, where vertices represents the ASs and edges are the communication links between them. The MiniSecBGP supports <a href="{{ request.route_url('realisticTopologies') }}">realistic topologies</a>, downloaded directly from public repositories, or <a href="{{ request.route_url('manualTopologies') }}">manual topologies</a> generated by the user.</p>
      <p><a class="btn" href="{{ request.route_url('topologies') }}">View details &raquo;</a></p>
    </div><!--/span-->
    <div class="span4">
      <h2>Link Agreement</h2>
      <p>The link agreement corresponds to the type of business relationship between ASs. Originally introduced by <a href="https://dl.acm.org/doi/10.1109/90.974527" target="_blank">Gao</a>, it organizes the relationship between ASs into three main <a href="{{ request.route_url('topologiesAgreement') }}">types</a>: customer-to-provider (c2p or p2c), peer-to-peer (p2p), and sibling-to-sibling (s2s).</p>
      <p><a class="btn" href="{{ request.route_url('topologiesAgreement') }}">View details &raquo;</a></p>
    </div><!--/span-->
  </div><!--/row-->
  <div class="row-fluid">
    <div class="span4">
      <h2>Hijack</h2>
      <p><a href="{{ request.route_url('hijack') }}">Hijacking</a> happens when an AS (attacker) announces the prefix of another AS (target) in BGP with no authorization, causing other ASs to believe that the prefix belongs to the attacker. The announcement can be intentionally (ex.: when an attacker gains administrative access to an AS's BGP router), or unintentionally (ex.: when a BGP administrator make some mistake).</p>
      <p><a class="btn" href="{{ request.route_url('hijack') }}">View details &raquo;</a></p>
    </div>
    <div class="span4">
      <h2>Attacker vs. Target Point of View</h2>
      <p>The hijacking attacker's point of view is based on identifying the AS with the shortest distance to the largest number of other ASs in BGP. While the target's point of view corresponds to identifying the AS capable of deceiving the largest number of other ASs when hijacking its prefix.</p>
    </div><!--/span-->
    <div class="span4">
      <h2>Attraction vs. Interception of traffic</h2>
      <p>Traffic attraction occurs when the attacker announces target's prefix to stealing traffic. In this case the traffic is not forwarded back to the target destination AS. In interception, the attacker diverts traffic to him (ex.: for analysis), but must guarantees traffic delivery to the target AS.</p>
    </div><!--/span-->
  </div><!--/row-->
  <div class="row-fluid">
    <div class="span4">
      <h2>Attack Scenario Definition</h2>
      <p><a href="{{ request.route_url('hijackAttackScenario') }}">Attack scenario</a> definition corresponds to the identification of ASs which update their route tables with false entries during a hijack event. In the attack, these ASs routes traffic to the hijacked destination using hijacked paths.</p>
      <p><a class="btn" href="{{ request.route_url('hijackAttackScenario') }}">View details &raquo;</a></p>
    </div>
    <div class="span4">
      <h2>Realistic Analysis</h2>
      <p><a href="{{ request.route_url('hijackRealisticAnalysis') }}">Realistic analysis</a> corresponds to the topology emulation (or the Affected Area) using real technologies, allowing the analysis of behavior, results validation and the propose of mechanisms to mitigate the risk of a hijacking event.</p>
      <p><a class="btn" href="{{ request.route_url('hijackRealisticAnalysis') }}">View details &raquo;</a></p>
    </div><!--/span-->
  </div><!--/row-->


{% endblock contentDashboard %}
